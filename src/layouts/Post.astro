---
import BaseLayout from "./Base.astro";
import Markdown from "../components/Markdown.astro";

const notes = {
    "info": {
        "text": "Info",
        "icon": `<i class="fa-solid fa-circle-info"></i>`
    },
    "warning": {
        "text": "Warning",
        "icon": `<i class="fa-solid fa-triangle-exclamation"></i>`
    },
    "important": {
        "text": "Important",
        "icon": `<i class="fa-regular fa-lightbulb"></i>`
    }
}

const { meta } = Astro.props;
---

<BaseLayout>
    <div class="markdown">
        <h1 class="markdown__title">{meta.data.title}</h1>
        <div class="markdown__meta">
            <span class="meta__icon">
                <i class="fa-solid fa-calendar-days"></i>
            </span>
            <span>Written: </span>
            <span>{meta.data.date}</span>
            <span>|</span>
            <span>{meta.data.time}</span>
        </div>
        <p class="markdown__desc">
            {meta.data.description}
        </p>
        <Markdown>
            <slot />
        </Markdown>
    </div>
</BaseLayout>

<style>
    .markdown__title {
        margin-top: var(--spacing-lg);
        margin-bottom: var(--spacing-xs);
        font-size: var(--font-xl);
    }

    .markdown__meta {
        display: flex;
        align-items: center;
        gap: var(--spacing-xs);
        font-size: var(--font-md);
        margin-bottom: var(--spacing-lg);
    }

    .markdown__desc {
        margin-bottom: var(--spacing-lg);
    }

    .meta__icon {
        font-size: var(--font-lg);
    }
</style>

<script define:vars={{notes}}>
    const blockquotes = document.querySelectorAll("blockquote p");
    blockquotes.forEach(blockquote => {
        const content = blockquote.textContent?.trim();
        const match = content?.match(/^\[(info|warning|important)\]\s*(.*)/);
        if (match){
            const type = match[1];
            const content = match[2];
            const note= notes[type];
            const iconSpan = document.createElement("span");
            blockquote?.parentElement?.classList?.add(type);
            iconSpan.classList.add("quote__icon");
            iconSpan.innerHTML = note.icon + " " + note.text;
            blockquote.textContent = content;
            blockquote.prepend(iconSpan);
            
        }
    });
</script>